<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
<meta http-equiv="X-UA-Compatible" content="IE=Edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="robots" content="index,nofollow">

<title>SimplePrograms - Python Wiki</title>
<script type="text/javascript" src="SimplePrograms%20-%20Python%20Wiki_files/common.js"></script>

<script type="text/javascript">
<!--
var search_hint = "Search";
//-->
</script>


<link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="SimplePrograms%20-%20Python%20Wiki_files/common.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="screen" href="SimplePrograms%20-%20Python%20Wiki_files/screen.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="print" href="SimplePrograms%20-%20Python%20Wiki_files/print.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="projection" href="SimplePrograms%20-%20Python%20Wiki_files/projection.css">

<!-- css only for MS IE6/IE7 browsers -->
<!--[if lt IE 8]>
   <link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/wiki/europython/css/msie.css">
<![endif]-->


<link rel="alternate" title="Python Wiki: SimplePrograms" href="https://wiki.python.org/moin/SimplePrograms?diffs=1&amp;show_att=1&amp;action=rss_rc&amp;unique=0&amp;page=SimplePrograms&amp;ddiffs=1" type="application/rss+xml">


<link rel="Start" href="https://wiki.python.org/moin/FrontPage">
<link rel="Alternate" title="Wiki Markup" href="https://wiki.python.org/moin/SimplePrograms?action=raw">
<link rel="Alternate" media="print" title="Print View" href="https://wiki.python.org/moin/SimplePrograms?action=print">
<link rel="Appendix" title="1234" href="https://wiki.python.org/moin/SimplePrograms?action=AttachFile&amp;do=view&amp;target=1234">
<link rel="Search" href="https://wiki.python.org/moin/FindPage">
<link rel="Index" href="https://wiki.python.org/moin/TitleIndex">
<link rel="Glossary" href="https://wiki.python.org/moin/WordIndex">
<link rel="Help" href="https://wiki.python.org/moin/HelpOnFormatting">
<style id="style-1-cropbar-clipper">/* Copyright 2014 Evernote Corporation. All rights reserved. */
.en-markup-crop-options {
    top: 18px !important;
    left: 50% !important;
    margin-left: -100px !important;
    width: 200px !important;
    border: 2px rgba(255,255,255,.38) solid !important;
    border-radius: 4px !important;
}

.en-markup-crop-options div div:first-of-type {
    margin-left: 0px !important;
}
</style></head>

<body dir="ltr" lang="en">

<div id="header">

<form id="searchform" method="get" action="/moin/SimplePrograms">
<div>
<input type="hidden" name="action" value="fullsearch">
<input type="hidden" name="context" value="180">
<label for="searchinput" style="display: none;">Search:</label>
<input id="searchinput" type="text" name="value" value="Search" size="20" onfocus="searchFocus(this)" onblur="searchBlur(this)" onkeyup="searchChange(this)" onchange="searchChange(this)" alt="Search" class="disabled">
<input id="titlesearch" name="titlesearch" type="submit" value="Titles" alt="Search Titles" disabled="disabled">
<input id="fullsearch" name="fullsearch" type="submit" value="Text" alt="Search Full Text" disabled="disabled">
</div>
</form>
<script type="text/javascript">
<!--// Initialize search form
var f = document.getElementById('searchform');
f.getElementsByTagName('label')[0].style.display = 'none';
var e = document.getElementById('searchinput');
searchChange(e);
searchBlur(e);
//-->
</script>

<div id="logo"><a href="https://wiki.python.org/moin/FrontPage"></a><a href="http://www.python.org/"><img src="SimplePrograms%20-%20Python%20Wiki_files/python-logo.gif" alt="Python"></a><a name="logo"></a></div>
<div id="locationline">


<ul id="pagelocation">
<li><a href="https://wiki.python.org/moin/SimplePrograms">SimplePrograms</a></li>
</ul>

</div>

<ul id="pagetrail">
<li><a href="https://wiki.python.org/moin/BeginnersGuide/Overview">BeginnersGuide/Overview</a></li><li><a href="https://wiki.python.org/moin/SimplePrograms">SimplePrograms</a></li>
</ul>
</div>

<div id="sidebar">
<div id="star">

</div>
<div class="sidepanel">

<ul id="navibar">
<li class="wikilink"><a href="https://wiki.python.org/moin/FrontPage">FrontPage</a></li><li class="wikilink"><a href="https://wiki.python.org/moin/RecentChanges">RecentChanges</a></li><li class="wikilink"><a href="https://wiki.python.org/moin/FindPage">FindPage</a></li><li class="wikilink"><a href="https://wiki.python.org/moin/HelpContents">HelpContents</a></li><li class="current"><a href="https://wiki.python.org/moin/SimplePrograms">SimplePrograms</a></li>
</ul>

</div>
<div class="sidepanel">
<h1>Page</h1>
<ul class="editbar"><li><span class="disabled">Immutable Page</span></li><li class="toggleCommentsButton" style="display:none;"><a href="#" class="nbcomment" onclick="toggleComments();return false;">Comments</a></li><li><a class="nbinfo" href="https://wiki.python.org/moin/SimplePrograms?action=info" rel="nofollow">Info</a></li><li><a class="nbattachments" href="https://wiki.python.org/moin/SimplePrograms?action=AttachFile" rel="nofollow">Attachments</a></li><li>
<form class="actionsmenu" method="GET" action="/moin/SimplePrograms">
<div>
    
    <select name="action" onchange="if ((this.selectedIndex != 0) &amp;&amp;
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="show" selected="selected">More Actions:</option><option value="raw">Raw Text</option>
<option value="print">Print View</option>
<option value="refresh">Delete Cache</option>
<option value="show" disabled="disabled" class="disabled">------------------------</option>
<option value="SpellCheck">Check Spelling</option>
<option value="LikePages">Like Pages</option>
<option value="LocalSiteMap">Local Site Map</option>
<option value="show" disabled="disabled" class="disabled">------------------------</option>
<option value="RenamePage" disabled="disabled" class="disabled">Rename Page</option>
<option value="DeletePage" disabled="disabled" class="disabled">Delete Page</option>
<option value="show" disabled="disabled" class="disabled">------------------------</option>
<option value="show" disabled="disabled" class="disabled">------------------------</option>
<option value="show" disabled="disabled" class="disabled">Remove Spam</option>
<option value="show" disabled="disabled" class="disabled">Revert to this revision</option>
<option value="show" disabled="disabled" class="disabled">------------------------</option>
<option value="SlideShow">SlideShow</option>
    </select>
    
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('More Actions:');
//-->
</script>
</form>
</li></ul>

</div>
<div class="sidepanel">
<h1>User</h1>
<ul id="username"><li><a href="https://wiki.python.org/moin/SimplePrograms?action=login" id="login" rel="nofollow">Login</a></li></ul>
</div>
</div>

<div id="page" dir="ltr" lang="en">
<div dir="ltr" id="content" lang="en"><span class="anchor" id="top"></span>
<span class="anchor" id="line-1"></span><p class="line874">Please note that these examples are written in Python 2, and may need some adjustment to run under Python 3. <span class="anchor" id="line-2"></span><span class="anchor" id="line-3"></span></p><p class="line874">1 line: Output <span class="anchor" id="line-4"></span><span class="anchor" id="line-5"></span><span class="anchor" id="line-6"></span><span class="anchor" id="line-7"></span><span class="anchor" id="line-8"></span><span class="anchor" id="line-9"></span><span class="anchor" id="line-10"></span><span class="anchor" id="line-11"></span></p><p class="line867"><span class="anchor" id="line-12"></span><span class="anchor" id="line-13"></span></p><pre><span class="anchor" id="line-1"></span>print 'Hello, world!'</pre><span class="anchor" id="line-14"></span><span class="anchor" id="line-15"></span><span class="anchor" id="line-16"></span><span class="anchor" id="line-17"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-18"></span><span class="anchor" id="line-19"></span></p><p class="line874">2 lines: Input, assignment <span class="anchor" id="line-20"></span><span class="anchor" id="line-21"></span><span class="anchor" id="line-22"></span><span class="anchor" id="line-23"></span><span class="anchor" id="line-24"></span><span class="anchor" id="line-25"></span><span class="anchor" id="line-26"></span><span class="anchor" id="line-27"></span></p><p class="line867"><span class="anchor" id="line-28"></span><span class="anchor" id="line-29"></span><span class="anchor" id="line-30"></span></p><pre><span class="anchor" id="line-1-1"></span>name = raw_input('What is your name?\n')
<span class="anchor" id="line-2"></span>print 'Hi, %s.' % name</pre><span class="anchor" id="line-31"></span><span class="anchor" id="line-32"></span><span class="anchor" id="line-33"></span><span class="anchor" id="line-34"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-35"></span><span class="anchor" id="line-36"></span></p><p class="line874">3 lines: For loop, built-in enumerate function, new style formatting <span class="anchor" id="line-37"></span><span class="anchor" id="line-38"></span><span class="anchor" id="line-39"></span><span class="anchor" id="line-40"></span><span class="anchor" id="line-41"></span><span class="anchor" id="line-42"></span><span class="anchor" id="line-43"></span><span class="anchor" id="line-44"></span></p><p class="line867"><span class="anchor" id="line-45"></span><span class="anchor" id="line-46"></span><span class="anchor" id="line-47"></span><span class="anchor" id="line-48"></span></p><pre><span class="anchor" id="line-1-2"></span>friends = ['john', 'pat', 'gary', 'michael']
<span class="anchor" id="line-2-1"></span>for i, name in enumerate(friends):
<span class="anchor" id="line-3"></span>    print "iteration {iteration} is {name}".format(iteration=i, name=name)</pre><span class="anchor" id="line-49"></span><span class="anchor" id="line-50"></span><span class="anchor" id="line-51"></span><span class="anchor" id="line-52"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-53"></span><span class="anchor" id="line-54"></span></p><p class="line874">4 lines: Fibonacci, tuple assignment <span class="anchor" id="line-55"></span><span class="anchor" id="line-56"></span><span class="anchor" id="line-57"></span><span class="anchor" id="line-58"></span><span class="anchor" id="line-59"></span><span class="anchor" id="line-60"></span><span class="anchor" id="line-61"></span><span class="anchor" id="line-62"></span></p><p class="line867"><span class="anchor" id="line-63"></span><span class="anchor" id="line-64"></span><span class="anchor" id="line-65"></span><span class="anchor" id="line-66"></span><span class="anchor" id="line-67"></span></p><pre><span class="anchor" id="line-1-3"></span>parents, babies = (1, 1)
<span class="anchor" id="line-2-2"></span>while babies &lt; 100:
<span class="anchor" id="line-3-1"></span>    print 'This generation has {0} babies'.format(babies)
<span class="anchor" id="line-4"></span>    parents, babies = (babies, parents + babies)</pre><span class="anchor" id="line-68"></span><span class="anchor" id="line-69"></span><span class="anchor" id="line-70"></span><span class="anchor" id="line-71"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-72"></span><span class="anchor" id="line-73"></span></p><p class="line874">5 lines: Functions <span class="anchor" id="line-74"></span><span class="anchor" id="line-75"></span><span class="anchor" id="line-76"></span><span class="anchor" id="line-77"></span><span class="anchor" id="line-78"></span><span class="anchor" id="line-79"></span><span class="anchor" id="line-80"></span><span class="anchor" id="line-81"></span></p><p class="line867"><span class="anchor" id="line-82"></span><span class="anchor" id="line-83"></span><span class="anchor" id="line-84"></span><span class="anchor" id="line-85"></span><span class="anchor" id="line-86"></span><span class="anchor" id="line-87"></span></p><pre><span class="anchor" id="line-1-4"></span>def greet(name):
<span class="anchor" id="line-2-3"></span>    print 'Hello', name
<span class="anchor" id="line-3-2"></span>greet('Jack')
<span class="anchor" id="line-4-1"></span>greet('Jill')
<span class="anchor" id="line-5"></span>greet('Bob')</pre><span class="anchor" id="line-88"></span><span class="anchor" id="line-89"></span><span class="anchor" id="line-90"></span><span class="anchor" id="line-91"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-92"></span><span class="anchor" id="line-93"></span></p><p class="line874">6 lines: Import, regular expressions <span class="anchor" id="line-94"></span><span class="anchor" id="line-95"></span><span class="anchor" id="line-96"></span><span class="anchor" id="line-97"></span><span class="anchor" id="line-98"></span><span class="anchor" id="line-99"></span><span class="anchor" id="line-100"></span><span class="anchor" id="line-101"></span></p><p class="line867"><span class="anchor" id="line-102"></span><span class="anchor" id="line-103"></span><span class="anchor" id="line-104"></span><span class="anchor" id="line-105"></span><span class="anchor" id="line-106"></span><span class="anchor" id="line-107"></span><span class="anchor" id="line-108"></span></p><pre><span class="anchor" id="line-1-5"></span>import re
<span class="anchor" id="line-2-4"></span>for test_string in ['555-1212', 'ILL-EGAL']:
<span class="anchor" id="line-3-3"></span>    if re.match(r'^\d{3}-\d{4}$', test_string):
<span class="anchor" id="line-4-2"></span>        print test_string, 'is a valid US local phone number'
<span class="anchor" id="line-5-1"></span>    else:
<span class="anchor" id="line-6"></span>        print test_string, 'rejected'</pre><span class="anchor" id="line-109"></span><span class="anchor" id="line-110"></span><span class="anchor" id="line-111"></span><span class="anchor" id="line-112"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-113"></span><span class="anchor" id="line-114"></span></p><p class="line874">7 lines: Dictionaries, generator expressions <span class="anchor" id="line-115"></span><span class="anchor" id="line-116"></span><span class="anchor" id="line-117"></span><span class="anchor" id="line-118"></span><span class="anchor" id="line-119"></span><span class="anchor" id="line-120"></span><span class="anchor" id="line-121"></span><span class="anchor" id="line-122"></span></p><p class="line867"><span class="anchor" id="line-123"></span><span class="anchor" id="line-124"></span><span class="anchor" id="line-125"></span><span class="anchor" id="line-126"></span><span class="anchor" id="line-127"></span><span class="anchor" id="line-128"></span><span class="anchor" id="line-129"></span><span class="anchor" id="line-130"></span></p><pre><span class="anchor" id="line-1-6"></span>prices = {'apple': 0.40, 'banana': 0.50}
<span class="anchor" id="line-2-5"></span>my_purchase = {
<span class="anchor" id="line-3-4"></span>    'apple': 1,
<span class="anchor" id="line-4-3"></span>    'banana': 6}
<span class="anchor" id="line-5-2"></span>grocery_bill = sum(prices[fruit] * my_purchase[fruit]
<span class="anchor" id="line-6-1"></span>                   for fruit in my_purchase)
<span class="anchor" id="line-7"></span>print 'I owe the grocer $%.2f' % grocery_bill</pre><span class="anchor" id="line-131"></span><span class="anchor" id="line-132"></span><span class="anchor" id="line-133"></span><span class="anchor" id="line-134"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-135"></span><span class="anchor" id="line-136"></span></p><p class="line874">8 lines: Command line arguments, exception handling <span class="anchor" id="line-137"></span><span class="anchor" id="line-138"></span><span class="anchor" id="line-139"></span><span class="anchor" id="line-140"></span><span class="anchor" id="line-141"></span><span class="anchor" id="line-142"></span><span class="anchor" id="line-143"></span><span class="anchor" id="line-144"></span></p><p class="line867"><span class="anchor" id="line-145"></span><span class="anchor" id="line-146"></span><span class="anchor" id="line-147"></span><span class="anchor" id="line-148"></span><span class="anchor" id="line-149"></span><span class="anchor" id="line-150"></span><span class="anchor" id="line-151"></span><span class="anchor" id="line-152"></span><span class="anchor" id="line-153"></span><span class="anchor" id="line-154"></span></p><pre><span class="anchor" id="line-1-7"></span># This program adds up integers in the command line
<span class="anchor" id="line-2-6"></span>import sys
<span class="anchor" id="line-3-5"></span>try:
<span class="anchor" id="line-4-4"></span>    total = sum(int(arg) for arg in sys.argv[1:])
<span class="anchor" id="line-5-3"></span>    print 'sum =', total
<span class="anchor" id="line-6-2"></span>except ValueError:
<span class="anchor" id="line-7-1"></span>    print 'Please supply integer arguments'</pre><span class="anchor" id="line-155"></span><span class="anchor" id="line-156"></span><span class="anchor" id="line-157"></span><span class="anchor" id="line-158"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-159"></span><span class="anchor" id="line-160"></span></p><p class="line874">9 lines: Opening files <span class="anchor" id="line-161"></span><span class="anchor" id="line-162"></span><span class="anchor" id="line-163"></span><span class="anchor" id="line-164"></span><span class="anchor" id="line-165"></span><span class="anchor" id="line-166"></span><span class="anchor" id="line-167"></span><span class="anchor" id="line-168"></span></p><p class="line867"><span class="anchor" id="line-169"></span><span class="anchor" id="line-170"></span><span class="anchor" id="line-171"></span><span class="anchor" id="line-172"></span><span class="anchor" id="line-173"></span><span class="anchor" id="line-174"></span><span class="anchor" id="line-175"></span><span class="anchor" id="line-176"></span><span class="anchor" id="line-177"></span><span class="anchor" id="line-178"></span><span class="anchor" id="line-179"></span><span class="anchor" id="line-180"></span><span class="anchor" id="line-181"></span></p><pre><span class="anchor" id="line-1-8"></span># indent your Python code to put into an email
<span class="anchor" id="line-2-7"></span>import glob
<span class="anchor" id="line-3-6"></span># glob supports Unix style pathname extensions
<span class="anchor" id="line-4-5"></span>python_files = glob.glob('*.py')
<span class="anchor" id="line-5-4"></span>for file_name in sorted(python_files):
<span class="anchor" id="line-6-3"></span>    print '    ------' + file_name
<span class="anchor" id="line-7-2"></span>
<span class="anchor" id="line-8"></span>    with open(file_name) as f:
<span class="anchor" id="line-9"></span>        for line in f:
<span class="anchor" id="line-10"></span>            print '    ' + line.rstrip()
<span class="anchor" id="line-11"></span>
<span class="anchor" id="line-12"></span>    print</pre><span class="anchor" id="line-182"></span><span class="anchor" id="line-183"></span><span class="anchor" id="line-184"></span><span class="anchor" id="line-185"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-186"></span><span class="anchor" id="line-187"></span></p><p class="line874">10 lines: Time, conditionals, from..import, for..else <span class="anchor" id="line-188"></span><span class="anchor" id="line-189"></span><span class="anchor" id="line-190"></span><span class="anchor" id="line-191"></span><span class="anchor" id="line-192"></span><span class="anchor" id="line-193"></span><span class="anchor" id="line-194"></span><span class="anchor" id="line-195"></span></p><p class="line867"><span class="anchor" id="line-196"></span><span class="anchor" id="line-197"></span><span class="anchor" id="line-198"></span><span class="anchor" id="line-199"></span><span class="anchor" id="line-200"></span><span class="anchor" id="line-201"></span><span class="anchor" id="line-202"></span><span class="anchor" id="line-203"></span><span class="anchor" id="line-204"></span><span class="anchor" id="line-205"></span><span class="anchor" id="line-206"></span><span class="anchor" id="line-207"></span><span class="anchor" id="line-208"></span><span class="anchor" id="line-209"></span><span class="anchor" id="line-210"></span><span class="anchor" id="line-211"></span><span class="anchor" id="line-212"></span><span class="anchor" id="line-213"></span><span class="anchor" id="line-214"></span></p><pre><span class="anchor" id="line-1-9"></span>from time import localtime
<span class="anchor" id="line-2-8"></span>
<span class="anchor" id="line-3-7"></span>activities = {8: 'Sleeping',
<span class="anchor" id="line-4-6"></span>              9: 'Commuting',
<span class="anchor" id="line-5-5"></span>              17: 'Working',
<span class="anchor" id="line-6-4"></span>              18: 'Commuting',
<span class="anchor" id="line-7-3"></span>              20: 'Eating',
<span class="anchor" id="line-8-1"></span>              22: 'Resting' }
<span class="anchor" id="line-9-1"></span>
<span class="anchor" id="line-10-1"></span>time_now = localtime()
<span class="anchor" id="line-11-1"></span>hour = time_now.tm_hour
<span class="anchor" id="line-12-1"></span>
<span class="anchor" id="line-13"></span>for activity_time in sorted(activities.keys()):
<span class="anchor" id="line-14"></span>    if hour &lt; activity_time:
<span class="anchor" id="line-15"></span>        print activities[activity_time]
<span class="anchor" id="line-16"></span>        break
<span class="anchor" id="line-17"></span>else:
<span class="anchor" id="line-18"></span>    print 'Unknown, AFK or sleeping!'</pre><span class="anchor" id="line-215"></span><span class="anchor" id="line-216"></span><span class="anchor" id="line-217"></span><span class="anchor" id="line-218"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-219"></span><span class="anchor" id="line-220"></span></p><p class="line874">11 lines: Triple-quoted strings, while loop <span class="anchor" id="line-221"></span><span class="anchor" id="line-222"></span><span class="anchor" id="line-223"></span><span class="anchor" id="line-224"></span><span class="anchor" id="line-225"></span><span class="anchor" id="line-226"></span><span class="anchor" id="line-227"></span><span class="anchor" id="line-228"></span></p><p class="line867"><span class="anchor" id="line-229"></span><span class="anchor" id="line-230"></span><span class="anchor" id="line-231"></span><span class="anchor" id="line-232"></span><span class="anchor" id="line-233"></span><span class="anchor" id="line-234"></span><span class="anchor" id="line-235"></span><span class="anchor" id="line-236"></span><span class="anchor" id="line-237"></span><span class="anchor" id="line-238"></span><span class="anchor" id="line-239"></span><span class="anchor" id="line-240"></span></p><pre><span class="anchor" id="line-1-10"></span>REFRAIN = '''
<span class="anchor" id="line-2-9"></span>%d bottles of beer on the wall,
<span class="anchor" id="line-3-8"></span>%d bottles of beer,
<span class="anchor" id="line-4-7"></span>take one down, pass it around,
<span class="anchor" id="line-5-6"></span>%d bottles of beer on the wall!
<span class="anchor" id="line-6-5"></span>'''
<span class="anchor" id="line-7-4"></span>bottles_of_beer = 99
<span class="anchor" id="line-8-2"></span>while bottles_of_beer &gt; 1:
<span class="anchor" id="line-9-2"></span>    print REFRAIN % (bottles_of_beer, bottles_of_beer,
<span class="anchor" id="line-10-2"></span>        bottles_of_beer - 1)
<span class="anchor" id="line-11-2"></span>    bottles_of_beer -= 1</pre><span class="anchor" id="line-241"></span><span class="anchor" id="line-242"></span><span class="anchor" id="line-243"></span><span class="anchor" id="line-244"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-245"></span><span class="anchor" id="line-246"></span></p><p class="line874">12 lines: Classes <span class="anchor" id="line-247"></span><span class="anchor" id="line-248"></span><span class="anchor" id="line-249"></span><span class="anchor" id="line-250"></span><span class="anchor" id="line-251"></span><span class="anchor" id="line-252"></span><span class="anchor" id="line-253"></span><span class="anchor" id="line-254"></span></p><p class="line867"><span class="anchor" id="line-255"></span><span class="anchor" id="line-256"></span><span class="anchor" id="line-257"></span><span class="anchor" id="line-258"></span><span class="anchor" id="line-259"></span><span class="anchor" id="line-260"></span><span class="anchor" id="line-261"></span><span class="anchor" id="line-262"></span><span class="anchor" id="line-263"></span><span class="anchor" id="line-264"></span><span class="anchor" id="line-265"></span><span class="anchor" id="line-266"></span><span class="anchor" id="line-267"></span></p><pre><span class="anchor" id="line-1-11"></span>class BankAccount(object):
<span class="anchor" id="line-2-10"></span>    def __init__(self, initial_balance=0):
<span class="anchor" id="line-3-9"></span>        self.balance = initial_balance
<span class="anchor" id="line-4-8"></span>    def deposit(self, amount):
<span class="anchor" id="line-5-7"></span>        self.balance += amount
<span class="anchor" id="line-6-6"></span>    def withdraw(self, amount):
<span class="anchor" id="line-7-5"></span>        self.balance -= amount
<span class="anchor" id="line-8-3"></span>    def overdrawn(self):
<span class="anchor" id="line-9-3"></span>        return self.balance &lt; 0
<span class="anchor" id="line-10-3"></span>my_account = BankAccount(15)
<span class="anchor" id="line-11-3"></span>my_account.withdraw(5)
<span class="anchor" id="line-12-2"></span>print my_account.balance</pre><span class="anchor" id="line-268"></span><span class="anchor" id="line-269"></span><span class="anchor" id="line-270"></span><span class="anchor" id="line-271"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-272"></span><span class="anchor" id="line-273"></span></p><p class="line874">13 lines: Unit testing with unittest <span class="anchor" id="line-274"></span><span class="anchor" id="line-275"></span><span class="anchor" id="line-276"></span><span class="anchor" id="line-277"></span><span class="anchor" id="line-278"></span><span class="anchor" id="line-279"></span><span class="anchor" id="line-280"></span><span class="anchor" id="line-281"></span></p><p class="line867"><span class="anchor" id="line-282"></span><span class="anchor" id="line-283"></span><span class="anchor" id="line-284"></span><span class="anchor" id="line-285"></span><span class="anchor" id="line-286"></span><span class="anchor" id="line-287"></span><span class="anchor" id="line-288"></span><span class="anchor" id="line-289"></span><span class="anchor" id="line-290"></span><span class="anchor" id="line-291"></span><span class="anchor" id="line-292"></span><span class="anchor" id="line-293"></span><span class="anchor" id="line-294"></span><span class="anchor" id="line-295"></span></p><pre><span class="anchor" id="line-1-12"></span>import unittest
<span class="anchor" id="line-2-11"></span>def median(pool):
<span class="anchor" id="line-3-10"></span>    copy = sorted(pool)
<span class="anchor" id="line-4-9"></span>    size = len(copy)
<span class="anchor" id="line-5-8"></span>    if size % 2 == 1:
<span class="anchor" id="line-6-7"></span>        return copy[(size - 1) / 2]
<span class="anchor" id="line-7-6"></span>    else:
<span class="anchor" id="line-8-4"></span>        return (copy[size/2 - 1] + copy[size/2]) / 2
<span class="anchor" id="line-9-4"></span>class TestMedian(unittest.TestCase):
<span class="anchor" id="line-10-4"></span>    def testMedian(self):
<span class="anchor" id="line-11-4"></span>        self.failUnlessEqual(median([2, 9, 9, 7, 9, 2, 4, 5, 8]), 7)
<span class="anchor" id="line-12-3"></span>if __name__ == '__main__':
<span class="anchor" id="line-13-1"></span>    unittest.main()</pre><span class="anchor" id="line-296"></span><span class="anchor" id="line-297"></span><span class="anchor" id="line-298"></span><span class="anchor" id="line-299"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-300"></span><span class="anchor" id="line-301"></span></p><p class="line874">14 lines: Doctest-based testing <span class="anchor" id="line-302"></span><span class="anchor" id="line-303"></span><span class="anchor" id="line-304"></span><span class="anchor" id="line-305"></span><span class="anchor" id="line-306"></span><span class="anchor" id="line-307"></span><span class="anchor" id="line-308"></span><span class="anchor" id="line-309"></span></p><p class="line867"><span class="anchor" id="line-310"></span><span class="anchor" id="line-311"></span><span class="anchor" id="line-312"></span><span class="anchor" id="line-313"></span><span class="anchor" id="line-314"></span><span class="anchor" id="line-315"></span><span class="anchor" id="line-316"></span><span class="anchor" id="line-317"></span><span class="anchor" id="line-318"></span><span class="anchor" id="line-319"></span><span class="anchor" id="line-320"></span><span class="anchor" id="line-321"></span><span class="anchor" id="line-322"></span><span class="anchor" id="line-323"></span><span class="anchor" id="line-324"></span></p><pre><span class="anchor" id="line-1-13"></span>def median(pool):
<span class="anchor" id="line-2-12"></span>    '''Statistical median to demonstrate doctest.
<span class="anchor" id="line-3-11"></span>    &gt;&gt;&gt; median([2, 9, 9, 7, 9, 2, 4, 5, 8])
<span class="anchor" id="line-4-10"></span>    7
<span class="anchor" id="line-5-9"></span>    '''
<span class="anchor" id="line-6-8"></span>    copy = sorted(pool)
<span class="anchor" id="line-7-7"></span>    size = len(copy)
<span class="anchor" id="line-8-5"></span>    if size % 2 == 1:
<span class="anchor" id="line-9-5"></span>        return copy[(size - 1) / 2]
<span class="anchor" id="line-10-5"></span>    else:
<span class="anchor" id="line-11-5"></span>        return (copy[size/2 - 1] + copy[size/2]) / 2
<span class="anchor" id="line-12-4"></span>if __name__ == '__main__':
<span class="anchor" id="line-13-2"></span>    import doctest
<span class="anchor" id="line-14-1"></span>    doctest.testmod()</pre><span class="anchor" id="line-325"></span><span class="anchor" id="line-326"></span><span class="anchor" id="line-327"></span><span class="anchor" id="line-328"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-329"></span><span class="anchor" id="line-330"></span></p><p class="line874">15 lines: itertools <span class="anchor" id="line-331"></span><span class="anchor" id="line-332"></span><span class="anchor" id="line-333"></span><span class="anchor" id="line-334"></span><span class="anchor" id="line-335"></span><span class="anchor" id="line-336"></span><span class="anchor" id="line-337"></span><span class="anchor" id="line-338"></span></p><p class="line867"><span class="anchor" id="line-339"></span><span class="anchor" id="line-340"></span><span class="anchor" id="line-341"></span><span class="anchor" id="line-342"></span><span class="anchor" id="line-343"></span><span class="anchor" id="line-344"></span><span class="anchor" id="line-345"></span><span class="anchor" id="line-346"></span><span class="anchor" id="line-347"></span><span class="anchor" id="line-348"></span><span class="anchor" id="line-349"></span><span class="anchor" id="line-350"></span><span class="anchor" id="line-351"></span><span class="anchor" id="line-352"></span><span class="anchor" id="line-353"></span><span class="anchor" id="line-354"></span></p><pre><span class="anchor" id="line-1-14"></span>from itertools import groupby
<span class="anchor" id="line-2-13"></span>lines = '''
<span class="anchor" id="line-3-12"></span>This is the
<span class="anchor" id="line-4-11"></span>first paragraph.
<span class="anchor" id="line-5-10"></span>
<span class="anchor" id="line-6-9"></span>This is the second.
<span class="anchor" id="line-7-8"></span>'''.splitlines()
<span class="anchor" id="line-8-6"></span># Use itertools.groupby and bool to return groups of
<span class="anchor" id="line-9-6"></span># consecutive lines that either have content or don't.
<span class="anchor" id="line-10-6"></span>for has_chars, frags in groupby(lines, bool):
<span class="anchor" id="line-11-6"></span>    if has_chars:
<span class="anchor" id="line-12-5"></span>        print ' '.join(frags)
<span class="anchor" id="line-13-3"></span># PRINTS:
<span class="anchor" id="line-14-2"></span># This is the first paragraph.
<span class="anchor" id="line-15-1"></span># This is the second.</pre><span class="anchor" id="line-355"></span><span class="anchor" id="line-356"></span><span class="anchor" id="line-357"></span><span class="anchor" id="line-358"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-359"></span><span class="anchor" id="line-360"></span></p><p class="line874">16 lines: csv module, tuple unpacking, cmp() built-in <span class="anchor" id="line-361"></span><span class="anchor" id="line-362"></span><span class="anchor" id="line-363"></span><span class="anchor" id="line-364"></span><span class="anchor" id="line-365"></span><span class="anchor" id="line-366"></span><span class="anchor" id="line-367"></span><span class="anchor" id="line-368"></span></p><p class="line867"><span class="anchor" id="line-369"></span><span class="anchor" id="line-370"></span><span class="anchor" id="line-371"></span><span class="anchor" id="line-372"></span><span class="anchor" id="line-373"></span><span class="anchor" id="line-374"></span><span class="anchor" id="line-375"></span><span class="anchor" id="line-376"></span><span class="anchor" id="line-377"></span><span class="anchor" id="line-378"></span><span class="anchor" id="line-379"></span><span class="anchor" id="line-380"></span><span class="anchor" id="line-381"></span><span class="anchor" id="line-382"></span><span class="anchor" id="line-383"></span><span class="anchor" id="line-384"></span><span class="anchor" id="line-385"></span></p><pre><span class="anchor" id="line-1-15"></span>import csv
<span class="anchor" id="line-2-14"></span>
<span class="anchor" id="line-3-13"></span># write stocks data as comma-separated values
<span class="anchor" id="line-4-12"></span>writer = csv.writer(open('stocks.csv', 'wb', buffering=0))
<span class="anchor" id="line-5-11"></span>writer.writerows([
<span class="anchor" id="line-6-10"></span>    ('GOOG', 'Google, Inc.', 505.24, 0.47, 0.09),
<span class="anchor" id="line-7-9"></span>    ('YHOO', 'Yahoo! Inc.', 27.38, 0.33, 1.22),
<span class="anchor" id="line-8-7"></span>    ('CNET', 'CNET Networks, Inc.', 8.62, -0.13, -1.49)
<span class="anchor" id="line-9-7"></span>])
<span class="anchor" id="line-10-7"></span>
<span class="anchor" id="line-11-7"></span># read stocks data, print status messages
<span class="anchor" id="line-12-6"></span>stocks = csv.reader(open('stocks.csv', 'rb'))
<span class="anchor" id="line-13-4"></span>status_labels = {-1: 'down', 0: 'unchanged', 1: 'up'}
<span class="anchor" id="line-14-3"></span>for ticker, name, price, change, pct in stocks:
<span class="anchor" id="line-15-2"></span>    status = status_labels[cmp(float(change), 0.0)]
<span class="anchor" id="line-16-1"></span>    print '%s is %s (%s%%)' % (name, status, pct)</pre><span class="anchor" id="line-386"></span><span class="anchor" id="line-387"></span><span class="anchor" id="line-388"></span><span class="anchor" id="line-389"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-390"></span><span class="anchor" id="line-391"></span></p><p class="line874">18 lines: 8-Queens Problem (recursion) <span class="anchor" id="line-392"></span><span class="anchor" id="line-393"></span><span class="anchor" id="line-394"></span><span class="anchor" id="line-395"></span><span class="anchor" id="line-396"></span><span class="anchor" id="line-397"></span><span class="anchor" id="line-398"></span><span class="anchor" id="line-399"></span></p><p class="line867"><span class="anchor" id="line-400"></span><span class="anchor" id="line-401"></span><span class="anchor" id="line-402"></span><span class="anchor" id="line-403"></span><span class="anchor" id="line-404"></span><span class="anchor" id="line-405"></span><span class="anchor" id="line-406"></span><span class="anchor" id="line-407"></span><span class="anchor" id="line-408"></span><span class="anchor" id="line-409"></span><span class="anchor" id="line-410"></span><span class="anchor" id="line-411"></span><span class="anchor" id="line-412"></span><span class="anchor" id="line-413"></span><span class="anchor" id="line-414"></span><span class="anchor" id="line-415"></span><span class="anchor" id="line-416"></span><span class="anchor" id="line-417"></span><span class="anchor" id="line-418"></span><span class="anchor" id="line-419"></span><span class="anchor" id="line-420"></span><span class="anchor" id="line-421"></span><span class="anchor" id="line-422"></span><span class="anchor" id="line-423"></span><span class="anchor" id="line-424"></span></p><pre><span class="anchor" id="line-1-16"></span>BOARD_SIZE = 8
<span class="anchor" id="line-2-15"></span>
<span class="anchor" id="line-3-14"></span>def under_attack(col, queens):
<span class="anchor" id="line-4-13"></span>    left = right = col
<span class="anchor" id="line-5-12"></span>
<span class="anchor" id="line-6-11"></span>    for r, c in reversed(queens):
<span class="anchor" id="line-7-10"></span>        left, right = left - 1, right + 1
<span class="anchor" id="line-8-8"></span>
<span class="anchor" id="line-9-8"></span>        if c in (left, col, right):
<span class="anchor" id="line-10-8"></span>            return True
<span class="anchor" id="line-11-8"></span>    return False
<span class="anchor" id="line-12-7"></span>
<span class="anchor" id="line-13-5"></span>def solve(n):
<span class="anchor" id="line-14-4"></span>    if n == 0:
<span class="anchor" id="line-15-3"></span>        return [[]]
<span class="anchor" id="line-16-2"></span>
<span class="anchor" id="line-17-1"></span>    smaller_solutions = solve(n - 1)
<span class="anchor" id="line-18-1"></span>
<span class="anchor" id="line-19"></span>    return [solution+[(n,i+1)]
<span class="anchor" id="line-20"></span>        for i in xrange(BOARD_SIZE)
<span class="anchor" id="line-21"></span>            for solution in smaller_solutions
<span class="anchor" id="line-22"></span>                if not under_attack(i+1, solution)]
<span class="anchor" id="line-23"></span>for answer in solve(BOARD_SIZE):
<span class="anchor" id="line-24"></span>    print answer</pre><span class="anchor" id="line-425"></span><span class="anchor" id="line-426"></span><span class="anchor" id="line-427"></span><span class="anchor" id="line-428"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-429"></span><span class="anchor" id="line-430"></span></p><p class="line874">20 lines: Prime numbers sieve w/fancy generators <span class="anchor" id="line-431"></span><span class="anchor" id="line-432"></span><span class="anchor" id="line-433"></span><span class="anchor" id="line-434"></span><span class="anchor" id="line-435"></span><span class="anchor" id="line-436"></span><span class="anchor" id="line-437"></span><span class="anchor" id="line-438"></span></p><p class="line867"><span class="anchor" id="line-439"></span><span class="anchor" id="line-440"></span><span class="anchor" id="line-441"></span><span class="anchor" id="line-442"></span><span class="anchor" id="line-443"></span><span class="anchor" id="line-444"></span><span class="anchor" id="line-445"></span><span class="anchor" id="line-446"></span><span class="anchor" id="line-447"></span><span class="anchor" id="line-448"></span><span class="anchor" id="line-449"></span><span class="anchor" id="line-450"></span><span class="anchor" id="line-451"></span><span class="anchor" id="line-452"></span><span class="anchor" id="line-453"></span><span class="anchor" id="line-454"></span><span class="anchor" id="line-455"></span><span class="anchor" id="line-456"></span><span class="anchor" id="line-457"></span><span class="anchor" id="line-458"></span><span class="anchor" id="line-459"></span></p><pre><span class="anchor" id="line-1-17"></span>import itertools
<span class="anchor" id="line-2-16"></span>
<span class="anchor" id="line-3-15"></span>def iter_primes():
<span class="anchor" id="line-4-14"></span>     # an iterator of all numbers between 2 and +infinity
<span class="anchor" id="line-5-13"></span>     numbers = itertools.count(2)
<span class="anchor" id="line-6-12"></span>
<span class="anchor" id="line-7-11"></span>     # generate primes forever
<span class="anchor" id="line-8-9"></span>     while True:
<span class="anchor" id="line-9-9"></span>         # get the first number from the iterator (always a prime)
<span class="anchor" id="line-10-9"></span>         prime = numbers.next()
<span class="anchor" id="line-11-9"></span>         yield prime
<span class="anchor" id="line-12-8"></span>
<span class="anchor" id="line-13-6"></span>         # this code iteratively builds up a chain of
<span class="anchor" id="line-14-5"></span>         # filters...slightly tricky, but ponder it a bit
<span class="anchor" id="line-15-4"></span>         numbers = itertools.ifilter(prime.__rmod__, numbers)
<span class="anchor" id="line-16-3"></span>
<span class="anchor" id="line-17-2"></span>for p in iter_primes():
<span class="anchor" id="line-18-2"></span>    if p &gt; 1000:
<span class="anchor" id="line-19-1"></span>        break
<span class="anchor" id="line-20-1"></span>    print p</pre><span class="anchor" id="line-460"></span><span class="anchor" id="line-461"></span><span class="anchor" id="line-462"></span><span class="anchor" id="line-463"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-464"></span><span class="anchor" id="line-465"></span></p><p class="line874">21 lines: XML/HTML parsing (using Python 2.5 or third-party library) <span class="anchor" id="line-466"></span><span class="anchor" id="line-467"></span><span class="anchor" id="line-468"></span><span class="anchor" id="line-469"></span><span class="anchor" id="line-470"></span><span class="anchor" id="line-471"></span><span class="anchor" id="line-472"></span><span class="anchor" id="line-473"></span></p><p class="line867"><span class="anchor" id="line-474"></span><span class="anchor" id="line-475"></span><span class="anchor" id="line-476"></span><span class="anchor" id="line-477"></span><span class="anchor" id="line-478"></span><span class="anchor" id="line-479"></span><span class="anchor" id="line-480"></span><span class="anchor" id="line-481"></span><span class="anchor" id="line-482"></span><span class="anchor" id="line-483"></span><span class="anchor" id="line-484"></span><span class="anchor" id="line-485"></span><span class="anchor" id="line-486"></span><span class="anchor" id="line-487"></span><span class="anchor" id="line-488"></span><span class="anchor" id="line-489"></span><span class="anchor" id="line-490"></span><span class="anchor" id="line-491"></span><span class="anchor" id="line-492"></span><span class="anchor" id="line-493"></span><span class="anchor" id="line-494"></span><span class="anchor" id="line-495"></span></p><pre><span class="anchor" id="line-1-18"></span>dinner_recipe = '''&lt;html&gt;&lt;body&gt;&lt;table&gt;
<span class="anchor" id="line-2-17"></span>&lt;tr&gt;&lt;th&gt;amt&lt;/th&gt;&lt;th&gt;unit&lt;/th&gt;&lt;th&gt;item&lt;/th&gt;&lt;/tr&gt;
<span class="anchor" id="line-3-16"></span>&lt;tr&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;slices&lt;/td&gt;&lt;td&gt;baguette&lt;/td&gt;&lt;/tr&gt;
<span class="anchor" id="line-4-15"></span>&lt;tr&gt;&lt;td&gt;2+&lt;/td&gt;&lt;td&gt;tbsp&lt;/td&gt;&lt;td&gt;olive oil&lt;/td&gt;&lt;/tr&gt;
<span class="anchor" id="line-5-14"></span>&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;cup&lt;/td&gt;&lt;td&gt;tomatoes&lt;/td&gt;&lt;/tr&gt;
<span class="anchor" id="line-6-13"></span>&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;jar&lt;/td&gt;&lt;td&gt;pesto&lt;/td&gt;&lt;/tr&gt;
<span class="anchor" id="line-7-12"></span>&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;'''
<span class="anchor" id="line-8-10"></span>
<span class="anchor" id="line-9-10"></span># In Python 2.5 or from http://effbot.org/zone/element-index.htm
<span class="anchor" id="line-10-10"></span>import xml.etree.ElementTree as etree
<span class="anchor" id="line-11-10"></span>tree = etree.fromstring(dinner_recipe)
<span class="anchor" id="line-12-9"></span>
<span class="anchor" id="line-13-7"></span># For invalid HTML use http://effbot.org/zone/element-soup.htm
<span class="anchor" id="line-14-6"></span># import ElementSoup, StringIO
<span class="anchor" id="line-15-5"></span># tree = ElementSoup.parse(StringIO.StringIO(dinner_recipe))
<span class="anchor" id="line-16-4"></span>
<span class="anchor" id="line-17-3"></span>pantry = set(['olive oil', 'pesto'])
<span class="anchor" id="line-18-3"></span>for ingredient in tree.getiterator('tr'):
<span class="anchor" id="line-19-2"></span>    amt, unit, item = ingredient
<span class="anchor" id="line-20-2"></span>    if item.tag == "td" and item.text not in pantry:
<span class="anchor" id="line-21-1"></span>        print "%s: %s %s" % (item.text, amt.text, unit.text)</pre><span class="anchor" id="line-496"></span><span class="anchor" id="line-497"></span><span class="anchor" id="line-498"></span><span class="anchor" id="line-499"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-500"></span><span class="anchor" id="line-501"></span></p><p class="line874">28 lines: 8-Queens Problem (define your own exceptions) <span class="anchor" id="line-502"></span><span class="anchor" id="line-503"></span><span class="anchor" id="line-504"></span><span class="anchor" id="line-505"></span><span class="anchor" id="line-506"></span><span class="anchor" id="line-507"></span><span class="anchor" id="line-508"></span><span class="anchor" id="line-509"></span></p><p class="line867"><span class="anchor" id="line-510"></span><span class="anchor" id="line-511"></span><span class="anchor" id="line-512"></span><span class="anchor" id="line-513"></span><span class="anchor" id="line-514"></span><span class="anchor" id="line-515"></span><span class="anchor" id="line-516"></span><span class="anchor" id="line-517"></span><span class="anchor" id="line-518"></span><span class="anchor" id="line-519"></span><span class="anchor" id="line-520"></span><span class="anchor" id="line-521"></span><span class="anchor" id="line-522"></span><span class="anchor" id="line-523"></span><span class="anchor" id="line-524"></span><span class="anchor" id="line-525"></span><span class="anchor" id="line-526"></span><span class="anchor" id="line-527"></span><span class="anchor" id="line-528"></span><span class="anchor" id="line-529"></span><span class="anchor" id="line-530"></span><span class="anchor" id="line-531"></span><span class="anchor" id="line-532"></span><span class="anchor" id="line-533"></span><span class="anchor" id="line-534"></span><span class="anchor" id="line-535"></span><span class="anchor" id="line-536"></span><span class="anchor" id="line-537"></span><span class="anchor" id="line-538"></span></p><pre><span class="anchor" id="line-1-19"></span>BOARD_SIZE = 8
<span class="anchor" id="line-2-18"></span>
<span class="anchor" id="line-3-17"></span>class BailOut(Exception):
<span class="anchor" id="line-4-16"></span>    pass
<span class="anchor" id="line-5-15"></span>
<span class="anchor" id="line-6-14"></span>def validate(queens):
<span class="anchor" id="line-7-13"></span>    left = right = col = queens[-1]
<span class="anchor" id="line-8-11"></span>    for r in reversed(queens[:-1]):
<span class="anchor" id="line-9-11"></span>        left, right = left-1, right+1
<span class="anchor" id="line-10-11"></span>        if r in (left, col, right):
<span class="anchor" id="line-11-11"></span>            raise BailOut
<span class="anchor" id="line-12-10"></span>
<span class="anchor" id="line-13-8"></span>def add_queen(queens):
<span class="anchor" id="line-14-7"></span>    for i in range(BOARD_SIZE):
<span class="anchor" id="line-15-6"></span>        test_queens = queens + [i]
<span class="anchor" id="line-16-5"></span>        try:
<span class="anchor" id="line-17-4"></span>            validate(test_queens)
<span class="anchor" id="line-18-4"></span>            if len(test_queens) == BOARD_SIZE:
<span class="anchor" id="line-19-3"></span>                return test_queens
<span class="anchor" id="line-20-3"></span>            else:
<span class="anchor" id="line-21-2"></span>                return add_queen(test_queens)
<span class="anchor" id="line-22-1"></span>        except BailOut:
<span class="anchor" id="line-23-1"></span>            pass
<span class="anchor" id="line-24-1"></span>    raise BailOut
<span class="anchor" id="line-25"></span>
<span class="anchor" id="line-26"></span>queens = add_queen([])
<span class="anchor" id="line-27"></span>print queens
<span class="anchor" id="line-28"></span>print "\n".join(". "*q + "Q " + ". "*(BOARD_SIZE-q-1) for q in queens)</pre><span class="anchor" id="line-539"></span><span class="anchor" id="line-540"></span><span class="anchor" id="line-541"></span><span class="anchor" id="line-542"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-543"></span><span class="anchor" id="line-544"></span></p><p class="line862">33 lines: "Guess the Number" Game (edited) from <a class="http" href="http://inventwithpython.com/">http://inventwithpython.com</a> <span class="anchor" id="line-545"></span><span class="anchor" id="line-546"></span><span class="anchor" id="line-547"></span><span class="anchor" id="line-548"></span><span class="anchor" id="line-549"></span><span class="anchor" id="line-550"></span><span class="anchor" id="line-551"></span><span class="anchor" id="line-552"></span></p><p class="line867"><span class="anchor" id="line-553"></span><span class="anchor" id="line-554"></span><span class="anchor" id="line-555"></span><span class="anchor" id="line-556"></span><span class="anchor" id="line-557"></span><span class="anchor" id="line-558"></span><span class="anchor" id="line-559"></span><span class="anchor" id="line-560"></span><span class="anchor" id="line-561"></span><span class="anchor" id="line-562"></span><span class="anchor" id="line-563"></span><span class="anchor" id="line-564"></span><span class="anchor" id="line-565"></span><span class="anchor" id="line-566"></span><span class="anchor" id="line-567"></span><span class="anchor" id="line-568"></span><span class="anchor" id="line-569"></span><span class="anchor" id="line-570"></span><span class="anchor" id="line-571"></span><span class="anchor" id="line-572"></span><span class="anchor" id="line-573"></span><span class="anchor" id="line-574"></span><span class="anchor" id="line-575"></span><span class="anchor" id="line-576"></span><span class="anchor" id="line-577"></span><span class="anchor" id="line-578"></span><span class="anchor" id="line-579"></span><span class="anchor" id="line-580"></span><span class="anchor" id="line-581"></span></p><pre><span class="anchor" id="line-1-20"></span>import random
<span class="anchor" id="line-2-19"></span>
<span class="anchor" id="line-3-18"></span>guesses_made = 0
<span class="anchor" id="line-4-17"></span>
<span class="anchor" id="line-5-16"></span>name = raw_input('Hello! What is your name?\n')
<span class="anchor" id="line-6-15"></span>
<span class="anchor" id="line-7-14"></span>number = random.randint(1, 20)
<span class="anchor" id="line-8-12"></span>print 'Well, {0}, I am thinking of a number between 1 and 20.'.format(name)
<span class="anchor" id="line-9-12"></span>
<span class="anchor" id="line-10-12"></span>while guesses_made &lt; 6:
<span class="anchor" id="line-11-12"></span>
<span class="anchor" id="line-12-11"></span>    guess = int(raw_input('Take a guess: '))
<span class="anchor" id="line-13-9"></span>
<span class="anchor" id="line-14-8"></span>    guesses_made += 1
<span class="anchor" id="line-15-7"></span>
<span class="anchor" id="line-16-6"></span>    if guess &lt; number:
<span class="anchor" id="line-17-5"></span>        print 'Your guess is too low.'
<span class="anchor" id="line-18-5"></span>
<span class="anchor" id="line-19-4"></span>    if guess &gt; number:
<span class="anchor" id="line-20-4"></span>        print 'Your guess is too high.'
<span class="anchor" id="line-21-3"></span>
<span class="anchor" id="line-22-2"></span>    if guess == number:
<span class="anchor" id="line-23-2"></span>        break
<span class="anchor" id="line-24-2"></span>
<span class="anchor" id="line-25-1"></span>if guess == number:
<span class="anchor" id="line-26-1"></span>    print 'Good job, {0}! You guessed my number in {1} guesses!'.format(name, guesses_made)
<span class="anchor" id="line-27-1"></span>else:
<span class="anchor" id="line-28-1"></span>    print 'Nope. The number I was thinking of was {0}'.format(number)</pre><span class="anchor" id="line-582"></span><span class="anchor" id="line-583"></span><span class="anchor" id="line-584"></span><span class="anchor" id="line-585"></span><p class="line867"></p><hr><p class="line874"> <span class="anchor" id="line-586"></span><span class="anchor" id="line-587"></span></p><p class="line867"><a href="https://wiki.python.org/moin/CategoryDocumentation">CategoryDocumentation</a> <span class="anchor" id="line-588"></span><span class="anchor" id="bottom"></span></p></div><p id="pageinfo" class="info" dir="ltr" lang="en">SimplePrograms  (last edited 2015-06-13 04:34:34 by <span title="SteveHolden @ 109.144.253.178[109.144.253.178]"><a href="https://wiki.python.org/moin/SteveHolden" title="SteveHolden @ 109.144.253.178[109.144.253.178]">SteveHolden</a></span>)</p>

<div id="pagebottom"></div>
</div>


<div id="footer">
<ul id="credits">
<li><a href="http://moinmo.in/" title="This site uses the MoinMoin Wiki software.">MoinMoin Powered</a></li><li><a href="http://moinmo.in/Python" title="MoinMoin is written in Python.">Python Powered</a></li><li><a href="http://moinmo.in/GPL" title="MoinMoin is GPL licensed.">GPL licensed</a></li><li><a href="http://validator.w3.org/check?uri=referer" title="Click here to validate this page.">Valid HTML 4.01</a></li>
</ul>


</div>
<p style="text-align: center; font-size: 85%"><a href="https://wiki.python.org/moin/FrontPage#use">Unable to edit the page? See the FrontPage for instructions.</a></p>


</body></html>